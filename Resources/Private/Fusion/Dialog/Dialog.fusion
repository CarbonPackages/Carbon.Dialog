prototype(Carbon.Dialog:Dialog) < prototype(Neos.Fusion:Component) {
    // If you want to use multiple dialogs on one page, you have to set a unique key
    key = false

    // The title of the dialog
    title = false

    // The content of the dialog
    content = false

    // The tag name of the title
    titleTagName = ${Configuration.setting('Carbon.Dialog.titleTagName')}

   
    // By default, the dialog behaves as a dialog: it is closable with
    // the ESC key, and by clicking the backdrop. However, it is possible
    // to make it work like a "modal", which would remove these features.
    modal = ${Configuration.setting('Carbon.Dialog.modal')}
    
    // If set to false, no close button will be shown
    // If it is a string, it will renderd as content of the button
    closeButton = ${Configuration.setting('Carbon.Dialog.closeButton')}

    // Aria label of the close button
    closeLabel = ${Translation.translate('dialog.close', 'Close this window', [], 'Main', 'Carbon.Dialog')}

    // namespace of the dialog
    namespace = 'dialog'

    // show the overlay
    showOverlay = true

    // Internal
    carbon = 'carbon-dialog'
    id = ${BEM.string(this.carbon, this.key)}

    includeCSS = ${Configuration.setting('Carbon.Dialog.includeCSS')}
    includeJS = ${Configuration.setting('Carbon.Dialog.includeJS')}
    css = Neos.Fusion:ResourceUri {
        path = 'resource://Carbon.Dialog/Public/Main.css'
    }
    js = Neos.Fusion:ResourceUri {
        path = 'resource://Carbon.Dialog/Public/Main.js'
    }

    @if.hasContent = ${this.content}

    renderer = afx`
        <div
            id={props.id}
            class={[props.carbon, BEM.modifier(props.namespace, props.key)]}
            role={props.modal ? 'alertdialog' : 'dialog'}
            aria-labelledby={props.title ? props.id + '-title' : null}
            aria-hidden='true'
        >
            <link @if.set={props.includeCSS && props.css} rel="stylesheet" href={props.css} data-slipstream />
            <script @if.set={props.includeJS && props.js} src={props.js} data-slipstream defer></script>
            <Carbon.Dialog:Dialog.Fragment.Overlay @key='overlay' @if.set={props.showOverlay} {...props} />
            <Carbon.Dialog:Dialog.Fragment.Dialog @key='dialog' {...props} />
        </div>
    `
}
